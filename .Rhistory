dat2 <- read.csv(paste0("./cleaned/", i), header=F)
dat2 <- read.csv('./cleaned/2015-6003_cleaned.csv')
myResults <- dataFilter(dat=dat2, filterthresh=4, counter=1:12)
install.load <- function(package.name)
{
if (!require(package.name, character.only=T)) install.packages(package.name)
library(package.name, character.only=T)
}
install.load('tidyverse')
install.load('lubridate')
setwd('C:/users/gabri/Dropbox/GitHubRepos/TeknoFilter/') #set to whatever wd you will work out of
mode <- function(x, i){
ta <- table(x)
tam <- max(ta)
if (all(ta == tam))
mod <- NA
else
if(is.numeric(x))
mod <- as.numeric(names(ta)[ta == tam])
else
mod <- names(ta)[ta == tam]
#print(i)
return(mod)
}
magicFunc <- function(dat, tagHex, counter){
dat3 <- data.frame(dat, tdiff=c(NA, difftime(dat2$dtf[-1], dat2$dtf[-nrow(dat2)])), winmax=dat2$dtf+((dat2$nPRI*1.3*max(counter))+1))
##get rid off crazy values when tagID changes
head(dat3)
dat4 <- data.frame(dat3, crazy=c(NA,dat3$Hex[-nrow(dat3)]==dat3$Hex[-1]))
dat4$tdiff[dat4$crazy==0] <- NA
dat5 <- dat4[,-14]
dat5 <- dat5[dat5$tdiff>0.2 | is.na(dat5$tdiff),]
tagid <- dat5[dat5$Hex==tagHex,]##use 2892 as an example
logTable <- data.frame(hitRowNb=numeric(0), initialHitRowNb=numeric(0), isAccepted=logical(0), nbAcceptedHitsForThisInitialHit =logical(0))
for(i in 1:nrow(tagid)){
hits<- tagid[tagid$dtf>=tagid$dtf[i] & tagid$dtf<=tagid$winmax[i], ] #hits within window
#head(tagid[tagid$dtf>=tagid$dtf[i], ], 100)
#if nrow(hits>=4) then... (need to write code for this qualifier, if_else???)
if(nrow(hits)>1){
retained<- numeric(0) #make empty df to hold detections retained
# indices<- numeric(0) #make empty df to hold detections retained
for(j in 2:nrow(hits)){
candidates<- round(as.numeric(hits$dtf[j]-hits$dtf[1])/counter, digits = 2) #subsubtract time of each det in window from initial and divide by 1:12
candidates<- candidates[candidates>= tagid$nPRI[i]*0.651 & candidates<= tagid$nPRI[i]*1.3] #constrain values
retained<- c(retained, candidates)#bind each batch of retained candiate PRIs to a single list
# indices <- c(indices, rep(j, length(candidates)))
}
if(length(retained)==0){
logTable <- rbind(logTable, data.frame(hitRowNb=NA, initialHitRowNb=i, isAccepted=FALSE, nbAcceptedHitsForThisInitialHit=0))
} else {
#plot(table(retained))
ePRI<- min(mode(retained, i))
if(is.na(ePRI)) ePRI <- min(retained)
nbHits <- 1
for(j in 2:nrow(hits)){
ii <- round(as.numeric(hits$dtf[j]-hits$dtf[1])/ePRI)
uppb <- ii*ePRI+hits$dtf[1]+0.006+ii*0.006
lowb <- ii*ePRI+hits$dtf[1]-(0.006+ii*0.006)
nbHits <- nbHits+(hits$dtf[j]>= lowb & hits$dtf[j]<= uppb)
logTable <- rbind(logTable, data.frame(hitRowNb=i+j-1, initialHitRowNb=i, isAccepted=(hits$dtf[j]>= lowb & hits$dtf[j]<= uppb), nbAcceptedHitsForThisInitialHit=NA))
}
logTable$nbAcceptedHitsForThisInitialHit[logTable$initialHitRowNb ==i] <- nbHits
}
} else {
logTable <- rbind(logTable, data.frame(hitRowNb=NA, initialHitRowNb=i, isAccepted=FALSE, nbAcceptedHitsForThisInitialHit=0))
}
#print(paste("row", i,"done"))
#readline("next\n")
}
return(logTable)
}
dataFilter <- function(dat, filterthresh, counter){
res <- dat[numeric(0),]
timer <- 0
for(i in unique(dat$Hex)){
ans <- magicFunc(dat, tagHex=i, counter=1:12)
ans[!is.na(ans$hitRowNb),]
ans2 <- ans[ans$nbAcceptedHitsForThisInitialHit>= filterthresh,]
keep <- c(ans2$hitRowNb[ans2$isAccepted], ans2$initialHitRowNb[ans2$isAccepted])
keep <- keep[!duplicated(keep)]
ans3 <- dat[dat$Hex==i,][keep,]
res <- rbind(res, ans3)
timer <- timer+1
print(timer/length(unique(dat$Hex)))
}
return(res)
}
for(i in list.files("./raw")){
dat <- read.csv(paste0("./raw/", i), header=F)        #read in each file
names(dat)<- c("Filename", "RecSN", "DT", "FracSec", "Hex", "Junk", "valid", "junk2", "junk3") #rename columns
dat$nPRI<- 5   # set nPRI (Nominal PRI) for the tag
#combine the DT and FracSec columns into a single time column and convert to POSIXct
dat2<- dat #copy dat, so if we screw up we on't have to load data again
dat2$dtf<- paste0(dat2$DT, substring(dat2$FracSec,2)) #paste the fractional seconds to the end of the DT in a new column
dat2$dtf<- as.POSIXct(dat2$dtf, format = "%m/%d/%Y %H:%M:%OS", tz="Etc/GMT-8") #convert to POSIXct beware this may change value of 0.0000X
#head(strftime(dat2$dtf, format = "%m/%d/%Y %H:%M:%OS5")) #verify that although the fractional seconds don't print, they are indeed there
dat2<- arrange(dat2, Hex, dtf)#sort by TagID and then dtf, Frac Second
dat2<- as.tbl(dat2)
dat2$Hex <- as.character(dat2$Hex)
write.csv(dat2, paste0("./cleaned/", dat2$RecSN[1], "_cleaned.csv"), row.names=F)
myResults <- dataFilter(dat=dat2, filterthresh=4, counter=1:12)
rejecteds <- dat2[!paste(dat2$dtf, dat2$Hex) %in% paste(myResults$dtf, myResults$Hex),]
write.csv(myResults, paste0("./accepted/", myResults$RecSN[1], "_accepted.csv"), row.names=F)
write.csv(rejecteds, paste0("./rejected/", rejecteds$RecSN[1], "_rejected.csv"), row.names=F)
}
tags <- read.csv("./taglist/FriantTaglist.csv")
head(tags)
myresfiltered<- myResults[myResults$Hex, ] %in% tags$Tag.ID..hex.
myresfiltered
myresfiltered<- myResults$Hex %in% tags$Tag.ID..hex.
myresfiltered
myresfiltered<- myResults[myResults$Hex %in% tags$Tag.ID..hex., ]
head(myresfiltered)
rejfiltered <- rejecteds[rejecteds$Hex %in% tags$Tag.ID..hex., ]
write.csv(myresfiltered, paste0("./accepted/", myResults$RecSN[1], "_acceptedfiltered.csv"), row.names=F)
write.csv(rejfiltered, paste0("./rejected/", rejecteds$RecSN[1], "_rejectedfiltered.csv"), row.names=F)
dat3 <- data.frame(dat, tdiff=c(NA, difftime(dat2$dtf[-1], dat2$dtf[-nrow(dat2)])), winmax=dat2$dtf+((dat2$nPRI*1.3*max(counter))+1))
counter <- 1:12
dat3 <- data.frame(dat, tdiff=c(NA, difftime(dat2$dtf[-1], dat2$dtf[-nrow(dat2)])), winmax=dat2$dtf+((dat2$nPRI*1.3*max(counter))+1))
head(dat3)
dat4 <- data.frame(dat3, crazy=c(NA,dat3$Hex[-nrow(dat3)]==dat3$Hex[-1]))
dat4$tdiff[dat4$crazy==0] <- NA
dat5 <- dat4[,-14]
dat5 <- dat5[dat5$tdiff>0.2 | is.na(dat5$tdiff),]
filteredbytag<- dat5[dat$Hex %in% tags$Tag.ID..hex., ]
write.csv(filteredbytag, paste0("./accepted/", filteredbytag$RecSN[1], "_filteredbytag.csv"), row.names=F)
dat2
dat3 <- data.frame(dat2, tdiff=c(NA, difftime(dat2$dtf[-1], dat2$dtf[-nrow(dat2)])), winmax=dat2$dtf+((dat2$nPRI*1.3*max(counter))+1))
dat4 <- data.frame(dat3, crazy=c(NA,dat3$Hex[-nrow(dat3)]==dat3$Hex[-1]))
dat5 <- dat4[,-14]
dat5 <- dat5[dat5$tdiff>0.2 | is.na(dat5$tdiff),]
filteredbytag<- dat5[dat$Hex %in% tags$Tag.ID..hex., ]
write.csv(filteredbytag, paste0("./accepted/", filteredbytag$RecSN[1], "_filteredbytag.csv"), row.names=F)
tags<- read.csv("./taglist/FriantTaglist.csv", header = T) #list of known Tag IDs
mode <- function(x, i){
ta <- table(x)
tam <- max(ta)
if (all(ta == tam))
mod <- NA
else
if(is.numeric(x))
mod <- as.numeric(names(ta)[ta == tam])
else
mod <- names(ta)[ta == tam]
#print(i)
return(mod)
}
magicFunc <- function(dat, tagHex, counter){
dat3 <- data.frame(dat, tdiff=c(NA, difftime(dat2$dtf[-1], dat2$dtf[-nrow(dat2)])), winmax=dat2$dtf+((dat2$nPRI*1.3*max(counter))+1))
##get rid off crazy values when tagID changes
head(dat3)
dat4 <- data.frame(dat3, crazy=c(NA,dat3$Hex[-nrow(dat3)]==dat3$Hex[-1]))
dat4$tdiff[dat4$crazy==0] <- NA
dat5 <- dat4[,-14]
dat5 <- dat5[dat5$tdiff>0.2 | is.na(dat5$tdiff),]
tagid <- dat5[dat5$Hex==tagHex,]##use 2892 as an example
logTable <- data.frame(hitRowNb=numeric(0), initialHitRowNb=numeric(0), isAccepted=logical(0), nbAcceptedHitsForThisInitialHit =logical(0))
for(i in 1:nrow(tagid)){
hits<- tagid[tagid$dtf>=tagid$dtf[i] & tagid$dtf<=tagid$winmax[i], ] #hits within window
#head(tagid[tagid$dtf>=tagid$dtf[i], ], 100)
#if nrow(hits>=4) then... (need to write code for this qualifier, if_else???)
if(nrow(hits)>1){
retained<- numeric(0) #make empty df to hold detections retained
# indices<- numeric(0) #make empty df to hold detections retained
for(j in 2:nrow(hits)){
candidates<- round(as.numeric(hits$dtf[j]-hits$dtf[1])/counter, digits = 2) #subsubtract time of each det in window from initial and divide by 1:12
candidates<- candidates[candidates>= tagid$nPRI[i]*0.651 & candidates<= tagid$nPRI[i]*1.3] #constrain values
retained<- c(retained, candidates)#bind each batch of retained candiate PRIs to a single list
# indices <- c(indices, rep(j, length(candidates)))
}
if(length(retained)==0){
logTable <- rbind(logTable, data.frame(hitRowNb=NA, initialHitRowNb=i, isAccepted=FALSE, nbAcceptedHitsForThisInitialHit=0))
} else {
#plot(table(retained))
ePRI<- min(mode(retained, i))
if(is.na(ePRI)) ePRI <- min(retained)
nbHits <- 1
for(j in 2:nrow(hits)){
ii <- round(as.numeric(hits$dtf[j]-hits$dtf[1])/ePRI)
uppb <- ii*ePRI+hits$dtf[1]+0.006+ii*0.006
lowb <- ii*ePRI+hits$dtf[1]-(0.006+ii*0.006)
nbHits <- nbHits+(hits$dtf[j]>= lowb & hits$dtf[j]<= uppb)
logTable <- rbind(logTable, data.frame(hitRowNb=i+j-1, initialHitRowNb=i, isAccepted=(hits$dtf[j]>= lowb & hits$dtf[j]<= uppb), nbAcceptedHitsForThisInitialHit=NA))
}
logTable$nbAcceptedHitsForThisInitialHit[logTable$initialHitRowNb ==i] <- nbHits
}
} else {
logTable <- rbind(logTable, data.frame(hitRowNb=NA, initialHitRowNb=i, isAccepted=FALSE, nbAcceptedHitsForThisInitialHit=0))
}
#print(paste("row", i,"done"))
#readline("next\n")
}
return(logTable)
}
dataFilter <- function(dat, filterthresh, counter){
res <- dat[numeric(0),]
timer <- 0
for(i in unique(dat$Hex)){
ans <- magicFunc(dat, tagHex=i, counter=1:12)
ans[!is.na(ans$hitRowNb),]
ans2 <- ans[ans$nbAcceptedHitsForThisInitialHit>= filterthresh,]
keep <- c(ans2$hitRowNb[ans2$isAccepted], ans2$initialHitRowNb[ans2$isAccepted])
keep <- keep[!duplicated(keep)]
ans3 <- dat[dat$Hex==i,][keep,]
res <- rbind(res, ans3)
timer <- timer+1
print(timer/length(unique(dat$Hex)))
}
return(res)
}
magicFunc <- function(dat, tagHex, counter){
dat3 <- data.frame(dat, tdiff=c(NA, difftime(dat$dtf[-1], dat$dtf[-nrow(dat2)])), winmax=dat$dtf+((dat$nPRI*1.3*max(counter))+1))
##get rid off crazy values when tagID changes
head(dat3)
dat4 <- data.frame(dat3, crazy=c(NA,dat3$Hex[-nrow(dat3)]==dat3$Hex[-1]))
dat4$tdiff[dat4$crazy==0] <- NA
dat5 <- dat4[,-14]
dat5 <- dat5[dat5$tdiff>0.2 | is.na(dat5$tdiff),]
tagid <- dat5[dat5$Hex==tagHex,]##use 2892 as an example
logTable <- data.frame(hitRowNb=numeric(0), initialHitRowNb=numeric(0), isAccepted=logical(0), nbAcceptedHitsForThisInitialHit =logical(0))
for(i in 1:nrow(tagid)){
hits<- tagid[tagid$dtf>=tagid$dtf[i] & tagid$dtf<=tagid$winmax[i], ] #hits within window
#head(tagid[tagid$dtf>=tagid$dtf[i], ], 100)
#if nrow(hits>=4) then... (need to write code for this qualifier, if_else???)
if(nrow(hits)>1){
retained<- numeric(0) #make empty df to hold detections retained
# indices<- numeric(0) #make empty df to hold detections retained
for(j in 2:nrow(hits)){
candidates<- round(as.numeric(hits$dtf[j]-hits$dtf[1])/counter, digits = 2) #subsubtract time of each det in window from initial and divide by 1:12
candidates<- candidates[candidates>= tagid$nPRI[i]*0.651 & candidates<= tagid$nPRI[i]*1.3] #constrain values
retained<- c(retained, candidates)#bind each batch of retained candiate PRIs to a single list
# indices <- c(indices, rep(j, length(candidates)))
}
if(length(retained)==0){
logTable <- rbind(logTable, data.frame(hitRowNb=NA, initialHitRowNb=i, isAccepted=FALSE, nbAcceptedHitsForThisInitialHit=0))
} else {
#plot(table(retained))
ePRI<- min(mode(retained, i))
if(is.na(ePRI)) ePRI <- min(retained)
nbHits <- 1
for(j in 2:nrow(hits)){
ii <- round(as.numeric(hits$dtf[j]-hits$dtf[1])/ePRI)
uppb <- ii*ePRI+hits$dtf[1]+0.006+ii*0.006
lowb <- ii*ePRI+hits$dtf[1]-(0.006+ii*0.006)
nbHits <- nbHits+(hits$dtf[j]>= lowb & hits$dtf[j]<= uppb)
logTable <- rbind(logTable, data.frame(hitRowNb=i+j-1, initialHitRowNb=i, isAccepted=(hits$dtf[j]>= lowb & hits$dtf[j]<= uppb), nbAcceptedHitsForThisInitialHit=NA))
}
logTable$nbAcceptedHitsForThisInitialHit[logTable$initialHitRowNb ==i] <- nbHits
}
} else {
logTable <- rbind(logTable, data.frame(hitRowNb=NA, initialHitRowNb=i, isAccepted=FALSE, nbAcceptedHitsForThisInitialHit=0))
}
#print(paste("row", i,"done"))
#readline("next\n")
}
return(logTable)
}
for(i in list.files("./raw")){
datos <- read.csv(paste0("./raw/", i), header=F)        #read in each file
names(datos)<- c("Filename", "RecSN", "DT", "FracSec", "Hex", "Junk", "valid", "junk2", "junk3") #rename columns
datos$nPRI<- 5   # set nPRI (Nominal PRI) for the tag
#combine the DT and FracSec columns into a single time column and convert to POSIXct
dat2<- datos #copy dat, so if we screw up we on't have to load data again
dat2$dtf<- paste0(dat2$DT, substring(dat2$FracSec,2)) #paste the fractional seconds to the end of the DT in a new column
dat2$dtf<- as.POSIXct(dat2$dtf, format = "%m/%d/%Y %H:%M:%OS", tz="Etc/GMT-8") #convert to POSIXct beware this may change value of 0.0000X
#head(strftime(dat2$dtf, format = "%m/%d/%Y %H:%M:%OS5")) #verify that although the fractional seconds don't print, they are indeed there
dat2<- arrange(dat2, Hex, dtf)#sort by TagID and then dtf, Frac Second
dat2<- as.tbl(dat2)
dat2$Hex <- as.character(dat2$Hex)
write.csv(dat2, paste0("./cleaned/", dat2$RecSN[1], "_cleaned.csv"), row.names=F)
myResults <- dataFilter(dat=dat2, filterthresh=4, counter=1:12)
rejecteds <- dat2[!paste(dat2$dtf, dat2$Hex) %in% paste(myResults$dtf, myResults$Hex),]
write.csv(myResults, paste0("./accepted/", myResults$RecSN[1], "_accepted.csv"), row.names=F)
write.csv(rejecteds, paste0("./rejected/", rejecteds$RecSN[1], "_rejected.csv"), row.names=F)
}
install.packages("sendmailR")
library("sendmailR", lib.loc="~/R/win-library/3.3")
from <- "gsinger@ucdavis.edu"
to <- "edchapman@ucdavis.edu"
subject <- "Test Test Test"
body <- "Sending you an email from R"
mailControl=list(smtpServer="smtp.gmail.com")
sendmail(from=from,to=to,subject=subject,msg=body,control=mailControl)
sendmail_option
sendmail_options()
list()
mailControl=list(smtpServer="ASPMX.L.GOOGLE.COM")
sendmail(from=from,to=to,subject=subject,msg=body,control=mailControl)
??sendmail
detach("package:sendmailR", unload=TRUE)
install.packages("mailR")
library(mailR)
send.mail(from = sender,
to = recipients,
subject="Test",
body = "Sending an email from R",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name="gabrielpsinger@gmail.com", passwd="Love2f!sh4trout", ssl=TRUE),
authenticate = TRUE,
send = TRUE)
install.packages("rJava")
library(mailR)
sender <- "gabrielpsinger@gmai.edu"
recipients <- c("gabrielpsinger@gmail.com")
send.mail(from = sender,
to = recipients,
subject="Test",
body = "Sending an email from R",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name="gabrielpsinger@gmail.com", passwd="Love2f!sh4trout", ssl=TRUE),
authenticate = TRUE,
send = TRUE)
sender <- "gabrielpsinger@gmail.edu"
recipients <- c("gabrielpsinger@gmail.com")
send.mail(from = sender,
to = recipients,
subject="Test",
body = "Sending an email from R",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name="gabrielpsinger@gmail.com", passwd="Love2f!sh4trout", ssl=TRUE),
authenticate = TRUE,
send = TRUE)
library("mailR", lib.loc="~/R/win-library/3.3")
for(i in list.files("./raw")){
datos <- read.csv(paste0("./raw/", i), header=F)        #read in each file
names(datos)<- c("Filename", "RecSN", "DT", "FracSec", "Hex", "Junk", "valid", "junk2", "junk3") #rename columns
datos$nPRI<- 5   # set nPRI (Nominal PRI) for the tag
#combine the DT and FracSec columns into a single time column and convert to POSIXct
dat2<- datos #copy dat, so if we screw up we on't have to load data again
dat2$dtf<- paste0(dat2$DT, substring(dat2$FracSec,2)) #paste the fractional seconds to the end of the DT in a new column
dat2$dtf<- as.POSIXct(dat2$dtf, format = "%m/%d/%Y %H:%M:%OS", tz="Etc/GMT-8") #convert to POSIXct beware this may change value of 0.0000X
#head(strftime(dat2$dtf, format = "%m/%d/%Y %H:%M:%OS5")) #verify that although the fractional seconds don't print, they are indeed there
dat2<- arrange(dat2, Hex, dtf)#sort by TagID and then dtf, Frac Second
dat2<- as.tbl(dat2)
dat2$Hex <- as.character(dat2$Hex)
write.csv(dat2, paste0("./cleaned/", dat2$RecSN[1], "_cleaned.csv"), row.names=F)
myResults <- dataFilter(dat=dat2, filterthresh=4, counter=1:12)
rejecteds <- dat2[!paste(dat2$dtf, dat2$Hex) %in% paste(myResults$dtf, myResults$Hex),]
write.csv(myResults, paste0("./accepted/", myResults$RecSN[1], "_accepted.csv"), row.names=F)
write.csv(rejecteds, paste0("./rejected/", rejecteds$RecSN[1], "_rejected.csv"), row.names=F)
}
1405+151900
for(i in list.files("./raw")){
dat <- read.csv(paste0("./raw/", i), header=F)        #read in each file
names(dat)<- c("Filename", "RecSN", "DT", "FracSec", "Hex", "Junk", "valid", "junk2", "junk3") #rename columns
dat$nPRI<- 5   # set nPRI (Nominal PRI) for the tag
#combine the DT and FracSec columns into a single time column and convert to POSIXct
dat2<- dat #copy dat, so if we screw up we on't have to load data again
dat2$dtf<- paste0(dat2$DT, substring(dat2$FracSec,2)) #paste the fractional seconds to the end of the DT in a new column
dat2$dtf<- as.POSIXct(dat2$dtf, format = "%m/%d/%Y %H:%M:%OS", tz="Etc/GMT-8") #convert to POSIXct beware this may change value of 0.0000X
#head(strftime(dat2$dtf, format = "%m/%d/%Y %H:%M:%OS5")) #verify that although the fractional seconds don't print, they are indeed there
dat2<- arrange(dat2, Hex, dtf)#sort by TagID and then dtf, Frac Second
dat2<- as.tbl(dat2)
dat2$Hex <- as.character(dat2$Hex)
write.csv(dat2, paste0("./cleaned/", dat2$RecSN[1], "_cleaned.csv"), row.names=F)
myResults <- dataFilter(dat=dat2, filterthresh=4, counter=1:12)
rejecteds <- dat2[!paste(dat2$dtf, dat2$Hex) %in% paste(myResults$dtf, myResults$Hex),]
write.csv(myResults, paste0("./accepted/", myResults$RecSN[1], "_accepted.csv"), row.names=F)
write.csv(rejecteds, paste0("./rejected/", rejecteds$RecSN[1], "_rejected.csv"), row.names=F)
}
library(sendmailR)
from <- "gabepsinger@gmail.com"
to <-  "gabrielpsinger@gmail.com"
subject <- "test"
body <- "sending an email from R"
mailControl <- list(smptpServer = "aspmx.l.google.com", port = "25")
sendmail(from  = from, to = to, subject = subject, msg = body, control = mailControl)
sendmail(from  = from, to = to, subject = subject, msg = body, control = mailControl)
rejecteds <- dat2[!paste(dat2$dtf, dat2$Hex) %in% paste(myResults$dtf, myResults$Hex),]
dim(dat2)
dim(myResults)
dim(rejecteds)
rejecteds <- dat2[!paste(strftime(dat2$dtf, format = "%m/%d/%Y %H:%M:%OS5"), dat2$Hex) %in% paste(strftime(myResults$dtf, format = "%m/%d/%Y %H:%M:%OS5"), myResults$Hex),]  write.csv(myResults, paste0("./accepted/", myResults$RecSN[1], "_accepted.csv"), row.names=F)
rejecteds <- dat2[!paste(strftime(dat2$dtf, format = "%m/%d/%Y %H:%M:%OS5"), dat2$Hex) %in% paste(strftime(myResults$dtf, format = "%m/%d/%Y %H:%M:%OS5"), myResults$Hex),]  write.csv(myResults, paste0("./accepted/", myResults$RecSN[1], "_accepted.csv"), row.names=F)
rejecteds <- dat2[!paste(strftime(dat2$dtf, format = "%m/%d/%Y %H:%M:%OS5"), dat2$Hex) %in%
paste(strftime(myResults$dtf, format = "%m/%d/%Y %H:%M:%OS5"), myResults$Hex),]
test <- dat2[Hex=="35D4", ]
test <- dat2[dat$Hex=="35D4", ]
test
test <- data.frame(dat2, tdiff=c(NA, difftime(dat2$dtf[-1], dat2$dtf[-nrow(dat2)])), winmax=dat2$dtf+((dat2$nPRI*1.3*12))+1))
test <- data.frame(dat2, tdiff=c(NA, difftime(dat2$dtf[-1], dat2$dtf[-nrow(dat2)])), winmax=dat2$dtf+((dat2$nPRI*1.3*12))+1)
test <- dat2[dat$Hex=="35D4", ]
test <- data.frame(test, tdiff=c(NA, difftime(dat2$dtf[-1], dat2$dtf[-nrow(dat2)])), winmax=dat2$dtf+((dat2$nPRI*1.3*12))+1)
head(test)
test <- dat2[dat$Hex=="35D4", ]
test <- data.frame(test, tdiff=c(NA, difftime(test$dtf[-1], test$dtf[-nrow(test)])), winmax=test$dtf+((test$nPRI*1.3*12))+1)
test
test <- dat2[dat$Hex=="35D4", ]
test
test <- dat2[dat2$Hex=="35D4", ]
test
test <- data.frame(test, tdiff=c(NA, difftime(test$dtf[-1], test$dtf[-nrow(test)])), winmax=test$dtf+((test$nPRI*1.3*12))+1)
dat4 <- data.frame(dat3, crazy=c(NA,dat3$Hex[-nrow(dat3)]==dat3$Hex[-1]))
dat4 <- data.frame(test, crazy=c(NA,test$Hex[-nrow(test)]==test$Hex[-1]))
dat4
dat4$tdiff[dat4$crazy==0] <- NA
dat4
dat5 <- dat4[,-14]
dat5
dat5 <- dat5[dat5$tdiff>0.2 | is.na(dat5$tdiff),]
res <- magicFunc(dat=dat2, tagHex='00CA', counter=1:12)
res
myResults <- dataFilter(dat=dat2, filterthresh=4, counter=1:12)
for(i in list.files("./raw")){
dat <- read.csv(paste0("./raw/", i), header=F)        #read in each file
names(dat)<- c("Filename", "RecSN", "DT", "FracSec", "Hex", "Junk", "valid", "junk2", "junk3") #rename headers
dat$nPRI<- 5 #nPRI = 'Nominal PRI' (ie set the pulse rate for the tag)
#combine the DT and FracSec columns into a single time column and convert to POSIXct
dat2<- dat #copy dat, so if we screw up we on't have to load data again
dat2$dtf<- paste0(dat2$DT, substring(dat2$FracSec,2)) #paste the fractional seconds to the end of the DT in a new column
dat2$dtf<- as.POSIXct(dat2$dtf, format = "%m/%d/%Y %H:%M:%OS", tz="Etc/GMT-8") #convert to POSIXct beware this may change value of 0.0000X
#head(strftime(dat2$dtf, format = "%m/%d/%Y %H:%M:%OS5")) #verify that although the fractional seconds don't print, they are indeed there
#sort tbl
dat2<- as.tbl(dat2) #change from data.frame to tbl (tidyverse/dplyr package) for easy manipulation
dat2$Hex <- as.character(dat2$Hex) #change the class of the tag id from hexmode to character
dat2<- arrange(dat2, Hex, dtf) #sort tbl by TagID and then by datetime with frac seconds
write.csv(dat2, paste0("./cleaned/", dat2$RecSN[1], "_cleaned.csv"), row.names=F)
myResults <- dataFilter(dat=dat2, filterthresh=4, counter=1:12)
rejecteds <- dat2[!paste(strftime(dat2$dtf, format = "%m/%d/%Y %H:%M:%OS5"), dat2$Hex) %in%
paste(strftime(myResults$dtf, format = "%m/%d/%Y %H:%M:%OS5"), myResults$Hex),]
write.csv(myResults, paste0("./accepted/", myResults$RecSN[1], "_accepted.csv"), row.names=F)
write.csv(rejecteds, paste0("./rejected/", rejecteds$RecSN[1], "_rejected.csv"), row.names=F)
}
for(i in list.files("./raw")){
dat <- read.csv(paste0("./raw/", i), header=F)        #read in each file
names(dat)<- c("Filename", "RecSN", "DT", "FracSec", "Hex", "Junk", "valid", "junk2", "junk3") #rename headers
dat$nPRI<- 5 #nPRI = 'Nominal PRI' (ie set the pulse rate for the tag)
#combine the DT and FracSec columns into a single time column and convert to POSIXct
dat2<- dat #copy dat, so if we screw up we on't have to load data again
dat2$dtf<- paste0(dat2$DT, substring(dat2$FracSec,2)) #paste the fractional seconds to the end of the DT in a new column
dat2$dtf<- as.POSIXct(dat2$dtf, format = "%m/%d/%Y %H:%M:%OS", tz="Etc/GMT-8") #convert to POSIXct beware this may change value of 0.0000X
#head(strftime(dat2$dtf, format = "%m/%d/%Y %H:%M:%OS5")) #verify that although the fractional seconds don't print, they are indeed there
#sort tbl
dat2<- as.tbl(dat2) #change from data.frame to tbl (tidyverse/dplyr package) for easy manipulation
dat2$Hex <- as.character(dat2$Hex) #change the class of the tag id from hexmode to character
dat2<- arrange(dat2, Hex, dtf) #sort tbl by TagID and then by datetime with frac seconds
write.csv(dat2, paste0("./cleaned/", dat2$RecSN[1], "_cleaned.csv"), row.names=F)
myResults <- dataFilter(dat=dat2, filterthresh=3, counter=1:12)
rejecteds <- dat2[!paste(strftime(dat2$dtf, format = "%m/%d/%Y %H:%M:%OS5"), dat2$Hex) %in%
paste(strftime(myResults$dtf, format = "%m/%d/%Y %H:%M:%OS5"), myResults$Hex),]
write.csv(myResults, paste0("./accepted/", myResults$RecSN[1], "_accepted.csv"), row.names=F)
write.csv(rejecteds, paste0("./rejected/", rejecteds$RecSN[1], "_rejected.csv"), row.names=F)
}
magicFunc <- function(datos, tagHex, counter){
dat3 <- data.frame(datos, tdiff=c(NA, difftime(datos$dtf[-1], datos$dtf[-nrow(datos)])), winmax=datos$dtf+((datos$nPRI*1.3*max(counter))+1))
##get rid off crazy values when tagID changes
head(dat3)
dat4 <- data.frame(dat3, crazy=c(NA,dat3$Hex[-nrow(dat3)]==dat3$Hex[-1]))
dat4$tdiff[dat4$crazy==0] <- NA
dat5 <- dat4[,-14]
dat5 <- dat5[dat5$tdiff>0.2 | is.na(dat5$tdiff),]
tagid <- dat5[dat5$Hex==tagHex,]##use 2892 as an example
logTable <- data.frame(hitRowNb=numeric(0), initialHitRowNb=numeric(0), isAccepted=logical(0), nbAcceptedHitsForThisInitialHit =logical(0))
for(i in 1:nrow(tagid)){
hits<- tagid[tagid$dtf>=tagid$dtf[i] & tagid$dtf<=tagid$winmax[i], ] #hits within window
#head(tagid[tagid$dtf>=tagid$dtf[i], ], 100)
#if nrow(hits>=4) then... (need to write code for this qualifier, if_else???)
if(nrow(hits)>1){
retained<- numeric(0) #make empty df to hold detections retained
# indices<- numeric(0) #make empty df to hold detections retained
for(j in 2:nrow(hits)){
candidates<- round(as.numeric(hits$dtf[j]-hits$dtf[1])/counter, digits = 2) #subsubtract time of each det in window from initial and divide by 1:12
candidates<- candidates[candidates>= tagid$nPRI[i]*0.651 & candidates<= tagid$nPRI[i]*1.3] #constrain values
retained<- c(retained, candidates)#bind each batch of retained candiate PRIs to a single list
# indices <- c(indices, rep(j, length(candidates)))
}
if(length(retained)==0){
logTable <- rbind(logTable, data.frame(hitRowNb=NA, initialHitRowNb=i, isAccepted=FALSE, nbAcceptedHitsForThisInitialHit=0))
} else {
#plot(table(retained))
ePRI<- min(mode(retained, i))
if(is.na(ePRI)) ePRI <- min(retained)
nbHits <- 1
for(j in 2:nrow(hits)){
ii <- round(as.numeric(hits$dtf[j]-hits$dtf[1])/ePRI)
uppb <- ii*ePRI+hits$dtf[1]+0.006+ii*0.006
lowb <- ii*ePRI+hits$dtf[1]-(0.006+ii*0.006)
nbHits <- nbHits+(hits$dtf[j]>= lowb & hits$dtf[j]<= uppb)
logTable <- rbind(logTable, data.frame(hitRowNb=i+j-1, initialHitRowNb=i, isAccepted=(hits$dtf[j]>= lowb & hits$dtf[j]<= uppb), nbAcceptedHitsForThisInitialHit=NA))
}
logTable$nbAcceptedHitsForThisInitialHit[logTable$initialHitRowNb ==i] <- nbHits
}
} else {
logTable <- rbind(logTable, data.frame(hitRowNb=NA, initialHitRowNb=i, isAccepted=FALSE, nbAcceptedHitsForThisInitialHit=0))
}
#print(paste("row", i,"done"))
#readline("next\n")
}
return(logTable)
}
myResults <- dataFilter(datos=dat2, filterthresh=4, counter=1:12)
myResults <- dataFilter(dat=dat2, filterthresh=4, counter=1:12)
dataFilter <- function(datos, filterthresh, counter){
res <- datos[numeric(0),]
timer <- 0
for(i in unique(dat$Hex)){
ans <- magicFunc(datos, tagHex=i, counter=1:12)
ans[!is.na(ans$hitRowNb),]
ans2 <- ans[ans$nbAcceptedHitsForThisInitialHit>= filterthresh,]
keep <- c(ans2$hitRowNb[ans2$isAccepted], ans2$initialHitRowNb[ans2$isAccepted])
keep <- keep[!duplicated(keep)]
ans3 <- datos[datos$Hex==i,][keep,]
res <- rbind(res, ans3)
timer <- timer+1
print(timer/length(unique(datos$Hex)))
}
return(res)
}
myResults <- dataFilter(datos=dat2, filterthresh=4, counter=1:12)
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
